#!/usr/bin/env bash

# Manages the the IPs used as part of the 'Public IP' feature
#
# This will attach and detach an IP from the node. This has been made by abusing the storage plugins of Kubernetes
# because it at least gives us a semi-reliable way of running code before and after a job is run on the node.

log() {
    echo -ne $* >&1
}

PATH=$PATH:$(dirname "$0")/.bin

domount() {
    mntpath=$1

    addr=$(echo $2 | jq -r '.addr')
    iface=$(echo $2 | jq -r '.iface')

    mkdir -p /tmp/ipinfo &> /dev/null

    echo $addr > "/tmp/ipinfo/$(echo $mntpath | md5sum | awk '{ print $1 }')_addr"
    echo $iface > "/tmp/ipinfo/$(echo $mntpath | md5sum | awk '{ print $1 }')_iface"

    ip addr add $addr/32 dev $iface &> /dev/null

    log '{"status":"Success"}'
    exit 0
}

unmount() {
    mntpath=$1

    addr_file="/tmp/ipinfo/$(echo $mntpath | md5sum | awk '{ print $1 }')_addr"
    iface_file="/tmp/ipinfo/$(echo $mntpath | md5sum | awk '{ print $1 }')_iface"

    addr=$(cat $addr_file)
    iface=$(cat $iface_file)

    ip addr del $addr/32 dev $iface &> /dev/null

    rm ${addr_file} &> /dev/null
    rm ${iface_file} &> /dev/null

    log '{"status":"Success"}'
    exit 0
}

op=$1

shift

case "$op" in
    init)
        log '{"status":"Success","capabilities":{"attach":false}}'
        exit 0
        ;;
    mount)
        domount $*
        ;;
    unmount)
        unmount $*
        ;;
    *)
        log '{"status":"Not supported"}'
        exit 0
esac

exit 1

