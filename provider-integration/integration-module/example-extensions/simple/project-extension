#!/usr/bin/env python3
import json
import sys
import subprocess
import os
import re
from helper import *

"""
This example extension maps UCloud projects into a series of local UNIX groups.

As with any other example extension, it is important to remember that they should be tailored to the needs of a
specific system. These are owned and maintained by the operators of the system on which the integration module runs.

Every project is mapped into a UNIX group and every group is mapped into an additional UNIX group. Members are 
automatically synchronized to these groups. However, this synchronization only occurs if the users have already
performed a connection with this provider (i.e. a UID mapping exists).

The following diagram shows an example of how the mapping is performed:

+---------------------------------------+               +---------------------------------------+ 
|                                       |               |                                       |
| Title: My Research                    |               | UNIX group: my_research_42410         |
|                                       |               |                                       |
| Group: Ph.D. Students                 |    maps to    | UNIX group: ph_d__students_42450      |
| Group: All                            | <===========> | UNIX group: all_42451                 |
| Group: Taskforce Foobar               |               | UNIX group: taskforce_foobar_42470    |
|                                       |               |                                       |
+---------------------------------------+               +---------------------------------------+

If a project/group is renamed, then the corresponding UNIX group is also renamed. However, the GID of the UNIX group
itself is retained.

The local unix groups are created using the following commands, which are all wrapped in utility functions as seen
below:

- /usr/sbin/groupadd
- /usr/sbin/groupmod
- /usr/sbin/groupdel
- /usr/sbin/usermod
- /usr/bin/gpasswd
- /usr/bin/getent

If these functions are not available on your target system, or they are simply unsuitable for group management, then you
should attempt to change the functions below to more suitable for your system.
"""

# NOTE(Dan): This script requires root privileges. However, the integration module will launch it with the privileges
# of the ucloud service user. As a result, we immediately attempt to elevate our own privileges via `sudo`.
if os.getuid() != 0:
    res = subprocess.run(['sudo', '-S', sys.argv[0], sys.argv[1]], stdin=open('/dev/null'))
    if res.returncode != 0:
        print("project-extension failed. Is sudo misconfigured?")
        exit(1)
    exit(0)

########################################################################################################################

with open(sys.argv[1]) as fp:
    request = json.load(fp)

request_type = request['type']

def generate_name(ucloud_title, allocated_gid):
    return re.sub(r'[^a-z0-9]', '_', ucloud_title.lower()) + '_' + str(allocated_gid)

########################################################################################################################

if request_type == 'project_renamed':
    gid = request['newProject']['localId']
    name = generate_name(request['newTitle'], gid)
    if request['oldProject'] is None:
        create_group(gid, name)
        slurm_account_create(name)
        create_workspace(name)
        slurm_account_set_quota(name, 0)
    else:
        pass # renaming is not well defined and it will cause a number of issues

elif request_type == 'group_created':
    for group in request['groups']:
        gid = group['localId']
        name = generate_name(group['group']['specification']['title'], gid)
        create_group(gid, name)

elif request_type == 'group_deleted':
    for group in request['groups']:
        gid = group['localId']
        delete_group(gid)

elif request_type == 'group_renamed':
    gid = request['group']['localId']
    name = generate_name(request['group']['group']['specification']['title'], gid)
    rename_group(gid, name)

elif request_type == 'members_added_to_project':
    gid = request['newProject']['localId']
    gn = get_group_by_gid(gid)
    for member in request['newMembers']:
        uid = member['uid']
        if uid is None:
            continue
        un = get_username_by_uid(uid)
        add_user_to_group(uid, gid)
        slurm_account_add_user(un, gn)

elif request_type == 'members_removed_from_project':
    gid = request['newProject']['localId']
    gn = get_group_by_gid(gid)
    for member in request['removedMembers']:
        uid = member['uid']
        if uid is None:
            continue
        un = get_username_by_uid(uid)
        remove_user_from_group(uid, gid)
        slurm_account_remove_user(un, gn)

elif request_type == 'members_added_to_group':
    gid = request['group']['localId']
    for member in request['newMembers']:
        uid = member['uid']
        if uid is None: continue
        add_user_to_group(uid, gid)

elif request_type == 'members_remove_from_group':
    gid = request['group']['localId']
    for member in request['removedMembers']:
        uid = member['uid']
        if uid is None: continue
        remove_user_from_group(uid, gid)

print('{}')
